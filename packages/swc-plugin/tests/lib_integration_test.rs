use compiled_swc::test_utils::{transform_with_compiled, TestTransformOptions};

#[test]
fn should_not_change_code_where_there_is_no_compiled_components() {
    let code = "const one = 1;";
    let result = transform_with_compiled(code, TestTransformOptions::default());
    
    // Should pass through unchanged
    assert!(result.contains("const one = 1"));
    // Should not contain any compiled imports or transformations
    assert!(!result.contains("@compiled/react/runtime"));
}

#[test] 
fn should_not_comment_file_if_no_transformation_occurred() {
    let code = r#"
        import { ClassNames } from '@compiled/react/runtime';
    "#;
    let result = transform_with_compiled(code, TestTransformOptions::default());
    
    // Should preserve the import as-is
    assert!(result.contains("import { ClassNames } from '@compiled/react/runtime'"));
    // Should not add file comment since no transformation occurred
    assert!(!result.contains("File generated by"));
}

#[test]
fn should_generate_fallback_file_comment_when_filename_is_not_defined() {
    let code = r#"
        import { styled } from '@compiled/react';

        const MyDiv = styled.div`
            font-size: 12px;
        `;
    "#;
    
    let result = transform_with_compiled(code, TestTransformOptions::default());
    
    // Should add file comment to the transformed output
    assert!(result.contains("File generated by @compiled/babel-plugin v0.0.0"));
}

#[test]
fn should_generate_fallback_file_comment_when_filename_is_defined() {
    let code = r#"
        import { styled } from '@compiled/react';

        const MyDiv = styled.div`
            font-size: 12px;
        `;
    "#;
    
    let options = TestTransformOptions {
        filename: Some("test.tsx".to_string()),
        ..Default::default()
    };
    
    let result = transform_with_compiled(code, options);
    
    // Should add file comment with the specified filename
    assert!(result.contains("test.tsx generated by @compiled/babel-plugin v0.0.0"));
}

#[test]
#[should_panic] // Expected to fail - transformation not fully implemented
fn should_transform_basic_styled_component() {
    let code = r#"
        import { styled } from '@compiled/react';

        const MyDiv = styled.div`
            font-size: 12px;
        `;
    "#;
    
    let result = transform_with_compiled(code, TestTransformOptions::default());
    
    // Test styled component transformation functionality
    // Expected transformations:
    assert!(result.contains("File generated by @compiled/babel-plugin v0.0.0"));
    assert!(result.contains("import { forwardRef } from \"react\""));
    assert!(result.contains("import * as React from \"react\""));
    assert!(result.contains("import { ax, ix, CC, CS } from \"@compiled/react/runtime\""));
    assert!(result.contains("const _ = \"._1wyb1fwx{font-size:12px}\""));
    assert!(result.contains("forwardRef"));
    assert!(result.contains("className={ax([\"_1wyb1fwx\", __cmplp.className])}"));
}

#[test]
fn css_prop_basic_transformation() {
    let code = r#"
        import '@compiled/react';
        const MyDiv = () => {
            return <div css="font-size:12px;">hello</div>
        };
    "#;
    
    let result = transform_with_compiled(code, TestTransformOptions::default());
    
    // Just check that it ran without crashing for now
    assert!(result.contains("const MyDiv"));
}

#[test]
#[should_panic] // Expected to fail - transformation not fully implemented
fn should_transform_basic_css_prop() {
    let code = r#"
        import '@compiled/react';

        const MyDiv = () => {
            return <div css="font-size:12px;">hello</div>
        };
    "#;
    
    let result = transform_with_compiled(code, TestTransformOptions::default());
    
    // Test CSS prop transformation functionality
    // Expected transformations:
    assert!(result.contains("File generated by @compiled/babel-plugin v0.0.0"));
    assert!(result.contains("import * as React from \"react\""));
    assert!(result.contains("import { ax, ix, CC, CS } from \"@compiled/react/runtime\""));
    assert!(result.contains("const _ = \"._1wyb1fwx{font-size:12px}\""));
    assert!(result.contains("<CC>"));
    assert!(result.contains("<CS>{[_]}</CS>"));
    assert!(result.contains("className={ax([\"_1wyb1fwx\"])}"));
}

#[test]
fn should_preserve_comments_at_the_top_of_the_processed_file() {
    let code = r#"
        // @flow strict-local
        import '@compiled/react';
        import React from 'react';

        const MyDiv = () => {
            return <div css="font-size:12px;">hello</div>
        };
    "#;
    
    let result = transform_with_compiled(code, TestTransformOptions::default());
    
    // Should preserve the flow comment and handle imports correctly
    assert!(result.contains("// @flow strict-local"));
    assert!(result.contains("File generated by @compiled/babel-plugin v0.0.0"));
    assert!(result.contains("import { ax, ix, CC, CS } from \"@compiled/react/runtime\""));
    // Be flexible with quotes - SWC might use single quotes
    assert!(result.contains("import React from") && result.contains("react"));
}

// Test our basic pattern detection (this should pass)
#[test]
fn pattern_detection_works() {
    // Test CSS prop detection
    let css_code = r#"
        import '@compiled/react';
        const MyDiv = () => <div css="color: red;">hello</div>;
    "#;
    let css_result = transform_with_compiled(css_code, TestTransformOptions::default());
    // For now, just verify it doesn't crash and returns valid JS
    assert!(css_result.contains("const MyDiv"));
    
    // Test styled detection  
    let styled_code = r#"
        import { styled } from '@compiled/react';
        const MyDiv = styled.div`color: red;`;
    "#;
    let styled_result = transform_with_compiled(styled_code, TestTransformOptions::default());
    // For now, just verify it doesn't crash and returns valid JS
    assert!(styled_result.contains("const MyDiv"));
}