import { transformSync } from '@babel/core';
import babelPlugin from '../../index';

const transform = (code: string) => {
  return transformSync(code, {
    configFile: false,
    babelrc: false,
    compact: true,
    plugins: [babelPlugin],
  })?.code;
};

describe('styled component behaviour', () => {
  it('should generate styled object component code', () => {
    const actual = transform(`
      import { styled, ThemeProvider } from '@compiled/react';

      const ListItem = styled.div({
        fontSize: '20px',
      });
    `);

    expect(actual).toMatchInlineSnapshot(`
      "/* File generated by @compiled/babel-plugin v0.0.0 */import{forwardRef}from'react';import*as React from'react';import{ax,ix,CC,CS}from\\"@compiled/react/runtime\\";import{ThemeProvider}from'@compiled/react';const _=\\"._1wybgktf{font-size:20px}\\";const ListItem=forwardRef(({as:C=\\"div\\",style,...props},ref)=><CC>
            <CS>{[_]}</CS>
            <C{...props}style={style}ref={ref}className={ax([\\"_1wybgktf\\",props.className])}/>
          </CC>);"
    `);
  });

  it('should generate styled template literal component code', () => {
    const actual = transform(`
      import { styled } from '@compiled/react';

      const ListItem = styled.div\`
        font-size: 20px;
      \`;
    `);

    expect(actual).toMatchInlineSnapshot(`
      "/* File generated by @compiled/babel-plugin v0.0.0 */import{forwardRef}from'react';import*as React from'react';import{ax,ix,CC,CS}from\\"@compiled/react/runtime\\";const _=\\"._1wybgktf{font-size:20px}\\";const ListItem=forwardRef(({as:C=\\"div\\",style,...props},ref)=><CC>
            <CS>{[_]}</CS>
            <C{...props}style={style}ref={ref}className={ax([\\"_1wybgktf\\",props.className])}/>
          </CC>);"
    `);
  });

  it('should compose CSS from multiple sources', () => {
    const actual = transform(`
      import { styled } from '@compiled/react';

      const styles = { fontSize: 12 };

      const ListItem = styled.div([
        styles,
        \`color: blue;\`,
        { fontWeight: 500 }
      ]);
    `);

    expect(actual).toInclude('{font-size:12px}');
    expect(actual).toInclude('{color:blue}');
    expect(actual).toInclude('{font-weight:500}');
  });

  it('should not pass down invalid html attributes to the node', () => {
    const actual = transform(`
      import { styled } from '@compiled/react';
      const ListItem = styled.div({
        fontSize: props => props.textSize,
      });
    `);

    expect(actual).toInclude('textSize,...props');
    expect(actual).toInclude('"--_fb92co":ix(textSize)');
  });

  it('should remove styled import', () => {
    const actual = transform(`
      import { styled } from '@compiled/react';
      const ListItem = styled.div({
        fontSize: '20px',
      });
    `);

    expect(actual).not.toInclude(`import { styled } from '@compiled/react';`);
  });

  it('should replace string literal styled component with component', () => {
    const actual = transform(`
      import { styled } from '@compiled/react';
      const ListItem = styled.div\`
        font-size: 20px;
      \`;
    `);

    expect(actual).toMatchInlineSnapshot(`
      "/* File generated by @compiled/babel-plugin v0.0.0 */import{forwardRef}from'react';import*as React from'react';import{ax,ix,CC,CS}from\\"@compiled/react/runtime\\";const _=\\"._1wybgktf{font-size:20px}\\";const ListItem=forwardRef(({as:C=\\"div\\",style,...props},ref)=><CC>
            <CS>{[_]}</CS>
            <C{...props}style={style}ref={ref}className={ax([\\"_1wybgktf\\",props.className])}/>
          </CC>);"
    `);
  });

  it('should add an identifier nonce to the style element', () => {
    const actual = transformSync(
      `
      import { styled } from '@compiled/react';

      const ListItem = styled.div\`
        font-size: \${props => props.color}px;
      \`;
      `,
      {
        configFile: false,
        babelrc: false,
        compact: true,
        plugins: [[babelPlugin, { nonce: '__webpack_nonce__' }]],
      }
    )?.code;

    expect(actual).toInclude('<CS nonce={__webpack_nonce__}');
  });

  it('should shortcircuit props with suffix to a empty string to avoid undefined in css', () => {
    const actual = transform(`
      import { styled } from '@compiled/react';

      const ListItem = styled.div\`
        font-size: \${props => props.color}px;
      \`;
    `);

    expect(actual).toInclude('"--_1p69eoh":ix(props.color,"px")');
  });

  it('should prefix interpolation', () => {
    const actual = transform(`
      import { styled } from '@compiled/react';

      const ListItem = styled.div\`
        font-size: -\${props => props.color}px;
      \`;
    `);

    expect(actual).toInclude('"--_1p69eoh":ix(props.color,"px","-")');
  });

  it('should spread down props to element', () => {
    const actual = transform(`
      import { styled } from '@compiled/react';

      const ListItem = styled.div\`
        font-size: 20px;
      \`;
    `);

    expect(actual).toInclude('<C{...props}');
  });

  it('should compose a component using template literal', () => {
    const actual = transform(`
      import React from 'react';
      import { styled } from '@compiled/react';

      const Component = () => null;

      const ListItem = styled(Component)\`
        font-size: 20px;
      \`;
    `);

    expect(actual).toInclude('as:C=Component');
  });

  it('should compose a component using object literal', () => {
    const actual = transform(`
      import React from 'react';
      import { styled } from '@compiled/react';

      const Component = () => null;

      const ListItem = styled(Component)({
        fontSize: 20
      });
    `);

    expect(actual).toInclude('as:C=Component');
  });

  it('should concat class name prop if defined', () => {
    const actual = transform(`
      import { styled } from '@compiled/react';
      const ListItem = styled.div\`
        font-size: 20px;
      \`;
    `);

    expect(actual).toInclude(`className={ax([\"_1wybgktf\",props.className])}`);
  });

  it('should inline constant identifier string literal', () => {
    const actual = transform(`
      import { styled } from '@compiled/react';

      const fontSize = '20px';

      const ListItem = styled.div\`
        font-size: \${fontSize};
      \`;
    `);

    expect(actual).toInclude('{font-size:20px}');
  });

  it('should transform an arrow function with a body into an IIFE', () => {
    const actual = transform(`
      import { styled } from '@compiled/react';

      const ListItem = styled.div({
        color: props => { return props.color; },
      });
    `);

    expect(actual).toInclude('{color:var(--_1poneq5)}');
    expect(actual).toInclude('"--_1poneq5":ix((()=>{return props.color;})())');
  });

  it('should transform an arrow function with a body into an IIFE by preventing passing down invalid html attributes to the node', () => {
    const actual = transform(`
      import { styled } from '@compiled/react';

      const ListItem = styled.div({
        fontSize: props => { return props.textSize; },
      });
    `);

    expect(actual).toInclude('{font-size:var(--_1j0t240)}');
    expect(actual).toInclude('({as:C="div",style,textSize,...props},ref)');
    expect(actual).toInclude('"--_1j0t240":ix((()=>{return textSize;})())');
  });

  it('should move suffix and prefix of a dynamic arrow function with a body into an IIFE', () => {
    const actual = transform(`
      import { styled } from '@compiled/react';

      const ListItem = styled.div({
        content: \`"$\{props => { return props.color; }}"\`
      });
    `);

    expect(actual).toInclude('{content:var(--_1poneq5)}');
    expect(actual).toInclude('"--_1poneq5":ix((()=>{return props.color;})(),"\\"","\\"")');
  });

  it('should move suffix and prefix of a dynamic arrow function with a body into an IIFE by preventing passing down invalid html attributes to the node', () => {
    const actual = transform(`
      import { styled } from '@compiled/react';

      const ListItem = styled.div({
        content: \`"$\{props => { return props.textSize; }}"\`
      });
    `);

    expect(actual).toInclude('{content:var(--_1j0t240)}');
    expect(actual).toInclude('({as:C="div",style,textSize,...props},ref)');
    expect(actual).toInclude('"--_1j0t240":ix((()=>{return textSize;})(),"\\"","\\"")');
  });

  it('should collect args as styles', () => {
    const actual = transform(`
      import { styled } from '@compiled/react';

      const ListItem = styled.div(
        { color: 'darkorchid' },
        { fontSize: 12 },
      );
    `);

    expect(actual).toIncludeMultiple([
      '{color:darkorchid}',
      '{font-size:12px}',
      'ax(["_syaz1paq _1wyb1fwx",props.className])',
    ]);
  });

  it('should not throw when template literal CSS has no terminating semi colon', () => {
    expect(() => {
      transform(`
      import { styled } from '@compiled/react';

      const ListItem = styled.div(
        \`color: red\`,
        { fontSize: 20 }
      );
    `);
    }).not.toThrow();
  });

  it('should handle destructuring in interpolation functions', () => {
    const actual = transform(
      `
      import { styled } from '@compiled/react';
      import colors from 'colors';

      export const BadgeSkeleton = styled.span\`
        background-color: \${({ isLoading }) => (isLoading ? colors.N20 : colors.N40)};
        color: \${({ loading: l }) => (l ? colors.N50 : colors.N10)};
        border-color: \${(propz) => (propz.loading ? colors.N100 : colors.N200)};
      \`;
    `
    );

    expect(actual).toMatchInlineSnapshot(`
      "/* File generated by @compiled/babel-plugin v0.0.0 */import{forwardRef}from'react';import*as React from'react';import{ax,ix,CC,CS}from\\"@compiled/react/runtime\\";import colors from'colors';const _3=\\"._1h6dk60n{border-color:var(--_8sf962)}\\";const _2=\\"._syaz1g46{color:var(--_xru1br)}\\";const _=\\"._bfhk14r0{background-color:var(--_3rbzda)}\\";export const BadgeSkeleton=forwardRef(({as:C=\\"span\\",style,isLoading,loading,...props},ref)=><CC>
            <CS>{[_,_2,_3]}</CS>
            <C{...props}style={{...style,\\"--_3rbzda\\":ix(isLoading?colors.N20:colors.N40),\\"--_xru1br\\":ix(loading?colors.N50:colors.N10),\\"--_8sf962\\":ix(props.loading?colors.N100:colors.N200)}}ref={ref}className={ax([\\"_bfhk14r0 _syaz1g46 _1h6dk60n\\",props.className])}/>
          </CC>);"
    `);
  });

  it('should not blow up with an expanding property', () => {
    expect(() =>
      transform(`
        import { styled } from '@compiled/react';

        export const BoardContent = styled.span\`
          flex: 1;
        \`;
    `)
    ).not.toThrow();
  });
});
