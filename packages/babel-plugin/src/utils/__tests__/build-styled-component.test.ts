import type { TransformOptions } from '../../test-utils';
import { transform as transformCode } from '../../test-utils';

describe('styledTemplate', () => {
  const transform = (code: string, opts: TransformOptions = {}) =>
    transformCode(code, { comments: true, ...opts });

  describe('if prop is a valid html attribute', () => {
    it('should move prop under `HTML_ATTRIBUTES`', () => {
      const actual = transform(`
          import { styled } from '@compiled/react';

          const MyDiv = styled.div\`
            font-size: 12px;
            width: \${(props) => (props.width ? props.width : "0")};
          \`;

          export const Component = () => (
            <div>
              <MyDiv width="24px"> Cell 1 </MyDiv>
              <MyDiv>  Cell 2 </MyDiv>
            </div>
          );
        `);

      expect(actual).toInclude('width: props.width');
    });
  });

  describe('if prop is not a valid html attribute', () => {
    it('should not move props under `HTML_ATTRIBUTES`', () => {
      const actual = transform(`
          import { styled } from '@compiled/react';

          const MyDiv = styled.div\`
            font-size: 12px;
            min-width: \${(props) => (props.minWidth ? props.minWidth : "0")};
          \`;

          export const Component = () => (
            <div>
              <MyDiv minWidth="24px"> Cell 1 </MyDiv>
              <MyDiv>  Cell 2 </MyDiv>
            </div>
          );
        `);

      expect(actual).not.toInclude('minWidth: props.minWidth');
    });
  });

  // TODO #1260 - to update
  it('should match snapshot`', () => {
    const actual = transform(`
        import { styled } from '@compiled/react';

        const TableCell = styled.div({
          backgroundColor: 'lightgrey',
          display: 'block',
          minHeight: (props) => (props.minHeight ? props.minHeight : '0'),
          minWidth: (props) => (props.minWidth ? props.minWidth : '0'),
          width: (props) => props.width,
        });

        export const Component = () => (
          <div>
            <TableCell minWidth="320px" minHeight="100px" width="320px"> Cell 1 </TableCell>
            <TableCell width="200px">  Cell 2 </TableCell>
          </div>
        );
      `);

    expect(actual).toMatchInlineSnapshot(`
      "/* File generated by @compiled/babel-plugin v0.0.0 */

      import { forwardRef } from \\"react\\";
      import * as React from \\"react\\";
      import { ax, ix, CC, CS } from \\"@compiled/react/runtime\\";
      const _7 = \\"._1ul9idpf{min-width:0}\\";
      const _6 = \\"._1ul91bgn{min-width:var(--_wuuzvz)}\\";
      const _5 = \\"._1tkeidpf{min-height:0}\\";
      const _4 = \\"._1tke1awx{min-height:var(--_1a8vqcs)}\\";
      const _3 = \\"._1bsbz3p1{width:var(--_1kuvdc9)}\\";
      const _2 = \\"._1e0c1ule{display:block}\\";
      const _ = \\"._bfhk1spn{background-color:lightgrey}\\";
      const TableCell = forwardRef(
        ({ as: C = \\"div\\", style, minHeight, minWidth, ...props }, ref) => (
          <CC>
            <CS>{[_, _2, _3, _4, _5, _6, _7]}</CS>
            <C
              {...props}
              style={{
                ...style,
                \\"--_1a8vqcs\\": ix(minHeight),
                \\"--_wuuzvz\\": ix(minWidth),
                \\"--_1kuvdc9\\": ix(props.width),
              }}
              ref={ref}
              className={ax([
                \\"_bfhk1spn _1e0c1ule _1bsbz3p1\\",
                minHeight ? \\"_1tke1awx\\" : \\"_1tkeidpf\\",
                minWidth ? \\"_1ul91bgn\\" : \\"_1ul9idpf\\",
                props.className,
              ])}
            />
          </CC>
        )
      );

      if (process.env.NODE_ENV !== \\"production\\") {
        TableCell.displayName = \\"TableCell\\";
      }

      export const Component = () => (
        <div>
          <TableCell minWidth=\\"320px\\" minHeight=\\"100px\\" width=\\"320px\\">
            {\\" \\"}
            Cell 1{\\" \\"}
          </TableCell>
          <TableCell width=\\"200px\\"> Cell 2 </TableCell>
        </div>
      );
      "
    `);
  });
});
