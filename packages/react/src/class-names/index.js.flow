/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.15.0
 * @flow
 */
import type { Node } from 'react';
import type { BasicTemplateInterpolations, CssFunction } from '../types';
export type Interpolations = (BasicTemplateInterpolations | CssFunction<> | CssFunction<>[])[];
export interface ClassNamesProps {
  children: (opts: {
    css: (css: CssFunction<> | CssFunction<>[], ...interpolations: Interpolations) => string,
    style: {
      [key: string]: string,
      ...
    },
    ...
  }) => Node;
}
/**
 * Use a component where styles are not necessarily tied to an element.
 *
 * ```
 * // Object CSS
 * <ClassNames>
 *   {({ css, style }) => children({ className: css({ fontSize: 12 }) })}
 * </ClassNames>
 *
 * // Template literal CSS
 * <ClassNames>
 *   {({ css, style }) => children({ className: css`font-size: 12px;` })}
 * </ClassNames>
 *
 * // Array CSS
 * <ClassNames>
 *   {({ css, style }) =>
 *    children({ className: css([{ fontSize: 12 }, `font-size: 12px`]) })}
 * </ClassNames>
 * ```
 *
 * For more help, read the docs:
 * https://compiledcssinjs.com/docs/api-class-names
 * @param props
 */
declare export function ClassNames(_: ClassNamesProps): React$Node;
