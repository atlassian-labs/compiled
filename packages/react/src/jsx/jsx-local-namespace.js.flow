/**
 * Flowtype definitions for jsx-local-namespace
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.15.0
 * @flow
 */
import type { CssFunction } from '../types';
declare type WithConditionalCSSProp<TProps> =
  /* Flow doesn't support conditional types, use `$Call` utility type */ any;
declare type ReactJSXElement = React$Node;
declare type ReactJSXElementClass = JSX.ElementClass;
declare type ReactJSXElementAttributesProperty = JSX.ElementAttributesProperty;
declare type ReactJSXElementChildrenAttribute = JSX.ElementChildrenAttribute;
declare type ReactJSXLibraryManagedAttributes<C, P> = JSX.LibraryManagedAttributes<C, P>;
declare type ReactJSXIntrinsicAttributes = JSX.IntrinsicAttributes;
declare type ReactJSXIntrinsicClassAttributes<T> = JSX.IntrinsicClassAttributes<T>;
declare type ReactJSXIntrinsicElements = $JSXIntrinsics;
declare type CompiledJSX$Element = ReactJSXElement;
declare type CompiledJSX$ElementClass = ReactJSXElementClass;
declare type CompiledJSX$ElementAttributesProperty = ReactJSXElementAttributesProperty;
declare type CompiledJSX$ElementChildrenAttribute = ReactJSXElementChildrenAttribute;
declare type CompiledJSX$LibraryManagedAttributes<C, P> = {
  ...WithConditionalCSSProp<P>,
  ...ReactJSXLibraryManagedAttributes<C, P>,
};
declare type CompiledJSX$IntrinsicAttributes = ReactJSXIntrinsicAttributes;
declare type CompiledJSX$IntrinsicClassAttributes<T> = ReactJSXIntrinsicClassAttributes<T>;
declare type Compiled$JSXIntrinsics = $ObjMapi<
  ReactJSXIntrinsicElements,
  <K>(K) => {
    ...$ElementType<ReactJSXIntrinsicElements, K>,
    ...{
      css?: CssFunction<> | CssFunction<>[],
      ...
    },
  }
>;
declare export {};
