/**
 * Flowtype definitions for ac
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.21.0
 * @flow
 */
/**
 * Memoize the result of ac so if it is called with the same args, it returns immediately.
 * Also, to prevent useless React rerenders
 */
declare var cache: Map<any, any>;
/**
 * `ac` returns an instance of AtomicGroups. The instance holds the knowledge of Atomic Group so we can chain `ac`.
 * e.g. <div className={ax([ax(['_aaaa_b']), '_aaaa_c'])} />
 */
declare class AtomicGroups {
  values: Map<string, string>;
  constructor(values: Map<string, string>): this;
  toString(): string;
}
/**
 * Joins classes together and ensures atomic declarations of a single group exist.
 * Atomic declarations take the form of `_{group}{value}` (always prefixed with an underscore),
 * where both `group` and `value` are hashes **four characters long**.
 * Class names can be of any length,
 * this function can take both atomic declarations and class names.
 *
 * Input:
 *
 * ```
 * ax(['_aaaabbbb', '_aaaacccc'])
 * ```
 *
 * Output:
 *
 * ```
 * '_aaaacccc'
 * ```
 * @param classes
 */
declare export function ac(
  classNames: (AtomicGroups | string | void | false)[]
): AtomicGroups | void;
declare export function memoizedAc(
  classNames: (AtomicGroups | string | void | false)[]
): AtomicGroups | void;
declare var _default: typeof ac;
declare export default typeof _default;
/**
 * Provide an opportunity to clear the cache to prevent memory leak.
 */
declare export function clearCache(): void;
/**
 * Expose cache
 */
declare export function getCache(): typeof cache;
