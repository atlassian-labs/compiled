/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.21.0
 * @flow
 */
import * as CSS from 'csstype';
/**
 * These are all the CSS props that will exist.
 * Only 'string' and 'number' are valid CSS values.
 * @example ```
 * const style: CssProps = {
 *  color: 'red',
 *  margin: 10,
 * };
 * ```
 */
declare type CssProps = $ReadOnly<CSS.Properties<string, number>>;
/**
 * Recursively typed CSS object because nested objects are allowed.
 * @example ```
 * const style: CssObject = {
 *  "@media screen and (min-width: 480px)": {
 *    ":hover": {
 *      color: 'red'
 *   }
 *  }
 * }
 * ```
 */
declare type CssObject = $ReadOnly<
  | {
      [key: string]: CssObject,
    }
  | CssProps
>;
declare type returnType<T: string> = { [key: T]: CssProps };
/**
 * ## cssMap
 *
 * Creates a collection of named CSS rules that are statically typed and useable with other Compiled APIs.
 * For further details [read the documentation](https://compiledcssinjs.com/docs/api-cssmap).
 * @example ```
 * const borderStyleMap = cssMap({
 *     none: { borderStyle: 'none' },
 *     solid: { borderStyle: 'solid' },
 * });
 * const Component = ({ borderStyle }) => <div css={css(borderStyleMap[borderStyle])} />
 *
 * <Component borderStyle="solid" />
 * ```
 */
declare export default function cssMap<T: string>(_styles: { [key: T]: CssObject }): $ReadOnly<
  returnType<T>
>;
