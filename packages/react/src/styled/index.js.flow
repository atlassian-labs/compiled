/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.15.0
 * @flow
 */
import type { ComponentType } from 'react';
import type { BasicTemplateInterpolations, CssFunction, FunctionInterpolation } from '../types';
/**
 * Typing for the CSS object.
 */
export type CssObject<TProps> = CssFunction<FunctionInterpolation<TProps>>;
/**
 * Extra props added to the output Styled Component.
 */
export type StyledProps = {
  as?: $Keys<$JSXIntrinsics>,
};
export type Interpolations<TProps: mixed> = (
  | BasicTemplateInterpolations
  | FunctionInterpolation<TProps>
  | CssObject<TProps>
  | CssObject<TProps>[]
)[];
/**
 * This allows us to take the generic `TTag` (that will be a valid `DOM` tag) and then use it to
 * define correct props based on it from `$JSXIntrinsics`, while also injecting our own
 * props from `StyledProps`.
 */
export interface StyledFunctionFromTag<TTag: $Keys<$JSXIntrinsics>> {
  <TProps: mixed>(
    css: CssObject<TProps> | $ReadOnlyArray<CssObject<TProps>>,
    ...interpolations: Interpolations<TProps>
  ): React$ComponentType<{
    ...TProps,
    ...$Exact<$ElementType<$JSXIntrinsics, TTag>>,
    ...StyledProps,
  }>;
}
export interface StyledFunctionFromComponent<TInheritedProps: mixed> {
  <TProps: mixed>(
    css: CssObject<TProps> | $ReadOnlyArray<string>,
    ...interpolations: Interpolations<TProps>
  ): React$ComponentType<{ ...TProps, ...StyledProps, ...TInheritedProps }>;
}
export type StyledComponentMap = $ObjMapi<$JSXIntrinsics, <Tag>(Tag) => StyledFunctionFromTag<Tag>>;
export type StyledComponentInstantiator = {
  /**
   * Typing to enable consumers to compose components, e.g: `styled(Component)`
   */
  <TInheritedProps: mixed>(
    Component: ComponentType<TInheritedProps>
  ): StyledFunctionFromComponent<TInheritedProps>,
  ...
} & StyledComponentMap;
/**
 * Create a component that ties styles to an element which comes with built-in behavior such as `ref` and `as` prop support.
 *
 * ```
 * styled.div`font-size: 12px`; // Template literal CSS
 * styled.div({ fontSize: 12 }); // Object CSS
 * styled.div([{ fontSize: 12 }, `font-size: 12px;`]) // Array CSS
 * styled.div({ fontSize: 12 }, `font-size: 12px`) Multi arguments CSS
 * ```
 *
 * For more help, read the docs:
 * https://compiledcssinjs.com/docs/api-styled
 */
declare export var styled: StyledComponentInstantiator;
