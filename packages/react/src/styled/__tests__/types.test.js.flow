// @flow strict-local
import React, { type Node, type Element } from 'react';
import { styled, type CssFunction } from '@compiled/react';

// Tagged template expression
() => {
  const StyledComponent = styled.div`
    font-size: 12px;
  `;
  return <StyledComponent>red text</StyledComponent>;
};

// Object call expression
() => {
  const StyledComponent = styled.div<{ big: number, children: Node }>({
    fontSize: (props: { big: number, children: Node }): number => (props.big == 5 ? 50 : 10),
  });

  return <StyledComponent big={5}>red text</StyledComponent>;
};

// Object call expression with no props
() => {
  const StyledComponent = styled.div({
    wordBreak: 'break-word',
    position: 'relative',
    left: `${2 - 2}px`,
  });

  return <StyledComponent>red text</StyledComponent>;
};

// Array
() => {
  const styles: CssFunction<{ fontSize: number, children: Node }>[] = [{ fontSize: '12px' }];
  const StyledComponent = styled.div(styles);
  return <StyledComponent fontSize={50}>red text</StyledComponent>;
};

// Multiple arguments
() => {
  const StyledComponent = styled.div({ fontSize: 12 }, `font-size: 12px`);
  return <StyledComponent>red text</StyledComponent>;
};

// Dynamic function calls
() => {
  const StyledComponent = styled.div({
    backgroundColor: token('elevation.surface', 'black'),
    zIndex: layers.modal(),
  });
};
