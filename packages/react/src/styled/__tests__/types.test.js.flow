// @flow strict-local
import React, { type Node, type Element } from 'react';
import { styled, type CssType } from '@compiled/react';

// Tagged template expression
() => {
  const StyledComponent = styled.div`
    font-size: 12px;
  `;
  return <StyledComponent>red text</StyledComponent>;
};

// Tagged template expression with conditional
() => {
  const StyledComponent = styled.div`
    font-size: ${({ big }) => (big ? big : 12)}px;
  `;
  return <StyledComponent big>red text</StyledComponent>;
};

// Object call expression
() => {
  const StyledComponent = styled.div<{ big: number, children: Node }>({
    fontSize: (props: { big: number, children: Node }): number => (props.big == 5 ? 50 : 10),
  });

  return <StyledComponent big={5}>red text</StyledComponent>;
};

// Object call expression with no props
() => {
  const StyledComponent = styled.div({
    wordBreak: 'break-word',
    position: 'relative',
    left: `${2 - 2}px`,
  });

  return <StyledComponent>red text</StyledComponent>;
};

// Object call expression with conditional
() => {
  const StyledComponent = styled.div<{ big: number, children: Node }>({
    fontSize: ({ big }) => `${big ? 50 : 12}px`,
    width: ({ big }) => (big ? 500 : 120),
  });

  return <StyledComponent big={5}>red text</StyledComponent>;
};

// Object call expression with logical operator expression
() => {
  // Type defined as constant so we test the type without sketchy null check errors
  const StyledComponent = styled.div<{ big?: 5000, children: Node }>(
    {
      fontSize: ({ big }) => `${big || 50}px`,
      width: ({ big }) => big && 500,
    },
    ({ big }) => big && { height: '100px' }
  );

  return <StyledComponent big={5000}>red text</StyledComponent>;
};

// Array
() => {
  const styles: CssType<{ fontSize: number, children: Node }>[] = [{ fontSize: '12px' }];
  const StyledComponent = styled.div(styles);
  return <StyledComponent fontSize={50}>red text</StyledComponent>;
};

// Multiple arguments
() => {
  const StyledComponent = styled.div({ fontSize: 12 }, `font-size: 12px`);
  return <StyledComponent>red text</StyledComponent>;
};

// Dynamic function calls
() => {
  const StyledComponent = styled.div({
    backgroundColor: token('elevation.surface', 'black'),
    zIndex: layers.modal(),
  });
};
