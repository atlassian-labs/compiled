import { join } from 'path';

import Parcel, { createWorkerFarm } from '@parcel/core';
import { MemoryFS } from '@parcel/fs';
import { format } from 'prettier';

const rootPath = join(__dirname, '..', '..', '..', '..');
const fixtureRoot = join(rootPath, 'fixtures/parcel-transformer-test-app');
const extractionFixtureRoot = join(rootPath, 'fixtures/parcel-transformer-test-extract-app');
const compressingClassNameFixtureRoot = join(
  rootPath,
  'fixtures/parcel-transformer-test-compress-class-name-app'
);
const customResolverFixtureRoot = join(
  rootPath,
  'fixtures/parcel-transformer-test-custom-resolver-app'
);
const babelComponentFixture = join(rootPath, 'fixtures/babel-component');

const workerFarm = createWorkerFarm();

afterAll(() => {
  workerFarm.end();
});

const outputFS = new MemoryFS(workerFarm);

const getParcelInstance = (workingDir: string) => {
  return new Parcel({
    config: join(workingDir, '.parcelrc'),
    entries: [join(workingDir, 'src', 'index.html')],
    outputFS,
    targets: {
      default: {
        distDir: join(workingDir, 'dist'),
      },
    },
    workerFarm,
    mode: 'production',
  });
};

it('transforms assets with babel plugin', async () => {
  const parcel = getParcelInstance(fixtureRoot);
  const { changedAssets } = await parcel.run();

  const asset = Array.from(changedAssets.values()).find(
    (asset) => asset.filePath === join(fixtureRoot, 'src/index.jsx')
  );

  const code = await asset?.getCode();
  const appCode = code?.slice(
    code.indexOf('/* index.jsx generated by @compiled/babel-plugin v0.0.0 */')
  );
  expect(appCode).toMatchInlineSnapshot(`
    "/* index.jsx generated by @compiled/babel-plugin v0.0.0 */ var _2 = "._syaz5scu{color:red}";
    var _ = "._1wyb12am{font-size:50px}";
    var App = function() {
        return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
            children: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(_runtime.CC, {
                children: [
                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(_runtime.CS, {
                        children: [
                            _,
                            _2
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxRuntime.jsx)("div", {
                        className: (0, _runtime.ax)([
                            "_1wyb12am _syaz5scu"
                        ]),
                        children: "hello from parcel"
                    })
                ]
            })
        });
    };
    "
  `);
}, 50000);

it('transforms assets with custom resolver and statically evaluates imports', async () => {
  const parcel = getParcelInstance(customResolverFixtureRoot);
  const { changedAssets } = await parcel.run();

  const asset = Array.from(changedAssets.values()).find(
    (asset) => asset.filePath === join(customResolverFixtureRoot, 'src/index.jsx')
  );

  const code = await asset?.getCode();

  expect(code).toInclude('color:red');
}, 50000);

it('transforms assets with compiled and extraction babel plugins', async () => {
  const parcel = getParcelInstance(extractionFixtureRoot);
  const { changedAssets, bundleGraph } = await parcel.run();
  const assets = Array.from(changedAssets.values());

  const indexJsCode = await assets
    .find((asset) => asset.filePath === join(extractionFixtureRoot, 'src/index.jsx'))
    ?.getCode();
  expect(indexJsCode).toMatchInlineSnapshot(`
    "/* index.jsx generated by @compiled/babel-plugin v0.0.0 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
    var _jsxRuntime = require("react/jsx-runtime");
    var _runtime = require("@compiled/react/runtime");
    var _index = require("@compiled/babel-component-extracted-fixture/dist/index");
    var _indexDefault = parcelHelpers.interopDefault(_index);
    var _babelComponentFixture = require("@compiled/babel-component-fixture");
    var _babelComponentFixtureDefault = parcelHelpers.interopDefault(_babelComponentFixture);
    var App = function() {
        return /*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _jsxRuntime.Fragment), {
            children: [
                /*#__PURE__*/ (0, _jsxRuntime.jsx)("div", {
                    className: (0, _runtime.ax)([
                        "_1wyb12am _syaz13q2"
                    ]),
                    children: "CSS prop"
                }),
                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _babelComponentFixtureDefault.default), {
                    children: "Babel component"
                }),
                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _indexDefault.default), {
                    children: "Component from NPM"
                })
            ]
        });
    };
    "
  `);

  const htmlAsset = Array.from(changedAssets.values()).find(
    (asset) => asset.filePath === join(extractionFixtureRoot, '/src/index.html')
  );

  const outputHtml = await outputFS.readFile(
    bundleGraph.getBundlesWithAsset(htmlAsset!)[0].filePath,
    'utf8'
  );

  const css = /<style>(.*?)<\/style>/.exec(outputHtml)?.pop();

  if (!css) throw new Error('No CSS is found.');

  expect(
    format(css, {
      parser: 'css',
      singleQuote: true,
    })
  ).toMatchInlineSnapshot(`
    "._1wyb12am {
      font-size: 50px;
    }
    ._syaz13q2 {
      color: blue;
    }
    ._19bv1vi7 {
      padding-left: 32px;
    }
    ._19itlf8h {
      border: 2px solid blue;
    }
    ._19pk1ul9 {
      margin-top: 30px;
    }
    ._1wyb1ul9 {
      font-size: 30px;
    }
    ._bfhk1gy6 {
      background-color: yellow;
    }
    ._ca0q1vi7 {
      padding-top: 32px;
    }
    ._n3td1vi7 {
      padding-bottom: 32px;
    }
    ._u5f31vi7 {
      padding-right: 32px;
    }
    "
  `);

  const babelComponentCode = await assets
    .find((asset) => asset.filePath === join(babelComponentFixture, 'dist/index.js'))
    ?.getCode();

  const extractedComponent = babelComponentCode
    ?.slice(babelComponentCode.indexOf('var Button'))
    .trim();
  expect(extractedComponent).toMatchInlineSnapshot(`
    "var Button = (0, _react.forwardRef)(function(_ref, __cmplr) {
        var _ref$as = _ref.as, C = _ref$as === void 0 ? "button" : _ref$as, __cmpls = _ref.style, __cmplp = _objectWithoutProperties(_ref, _excluded);
        return (0, _jsxRuntime.jsx)(C, _objectSpread(_objectSpread({}, __cmplp), {}, {
            style: __cmpls,
            ref: __cmplr,
            className: (0, _runtime.ax)([
                "_syaz13q2 _1wyb1ul9 _19itlf8h _ca0q1vi7 _u5f31vi7 _n3td1vi7 _19bv1vi7",
                __cmplp.className
            ])
        }));
    });
    Button.displayName = "Button";
    function BabelComponent(_ref2) {
        var children = _ref2.children;
        return (0, _jsxRuntime.jsx)("div", {
            className: (0, _runtime.ax)([
                "_19pk1ul9"
            ]),
            children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(Button, {
                children: children
            })
        });
    }"
  `);
}, 50000);

it('transforms assets with class name compression enabled', async () => {
  const parcel = getParcelInstance(compressingClassNameFixtureRoot);
  const { changedAssets, bundleGraph } = await parcel.run();

  const htmlAsset = Array.from(changedAssets.values()).find(
    (asset) => asset.filePath === join(compressingClassNameFixtureRoot, '/src/index.html')
  );

  const outputHtml = await outputFS.readFile(
    bundleGraph.getBundlesWithAsset(htmlAsset!)[0].filePath,
    'utf8'
  );

  const css = /<style>(.*?)<\/style>/.exec(outputHtml)?.pop();

  if (!css) throw new Error('No CSS is found.');

  expect(
    format(css, {
      parser: 'css',
      singleQuote: true,
    })
  ).toMatchInlineSnapshot(`
    ".a {
      font-size: 50px;
    }
    .b {
      color: red;
    }
    "
  `);
}, 50000);
