import { join } from 'path';

import { transformSync } from '@babel/core';
import compiledBabelPlugin from '@compiled/babel-plugin';
import { format } from 'prettier';

import stripRuntimeBabelPlugin from '../index';

const transform = (
  code: string,
  opts: {
    onFoundStyleRules?: (style: string[]) => void;
    run: 'both' | 'bake' | 'extract';
    runtime: 'automatic' | 'classic';
  }
): string => {
  const { onFoundStyleRules, run, runtime } = opts;
  const bake = run === 'both' || run === 'bake';
  const extract = run === 'both' || run === 'extract';

  const fileResult = transformSync(code, {
    babelrc: false,
    configFile: false,
    filename: join(__dirname, 'app.tsx'),
    plugins: [
      ...(bake ? [[compiledBabelPlugin, { importReact: runtime === 'classic' }]] : []),
      ...(extract ? [[stripRuntimeBabelPlugin, { onFoundStyleRules }]] : []),
    ],
    presets: [['@babel/preset-react', { runtime }]],
  });

  if (!fileResult || !fileResult.code) {
    throw new Error(`Missing fileResult: ${fileResult}`);
  }

  return format(fileResult.code, {
    parser: 'babel',
    singleQuote: true,
  });
};

// This test suite is designed to test source code, which is also known as first-party code
describe('babel-plugin-strip-runtime using source code', () => {
  const code = `
    import '@compiled/react';

    const Component = () => (
      <div css={{ fontSize: 12, color: 'blue' }}>
        hello world
      </div>
    );
  `;

  describe('when run in the same step', () => {
    describe('with the automatic runtime', () => {
      const runtime = 'automatic';

      it('removes the css prop runtime', () => {
        const actual = transform(code, { run: 'both', runtime });

        expect(actual).toMatchInlineSnapshot(`
          "/* app.tsx generated by @compiled/babel-plugin v0.0.0 */

          import { ax, ix } from '@compiled/react/runtime';
          import { jsxs as _jsxs } from 'react/jsx-runtime';
          import { jsx as _jsx } from 'react/jsx-runtime';

          const Component = () =>
            /*#__PURE__*/ _jsx('div', {
              className: ax(['_1wyb1fwx _syaz13q2']),
              children: 'hello world',
            });
          "
        `);
      });

      it('calls onFoundStyleRules for every found style', () => {
        const onFoundStyleRules = jest.fn();

        transform(code, { onFoundStyleRules, run: 'both', runtime });

        expect(onFoundStyleRules).toHaveBeenCalledTimes(1);
        expect(onFoundStyleRules).toHaveBeenCalledWith([
          '._1wyb1fwx{font-size:12px}',
          '._syaz13q2{color:blue}',
        ]);
      });
    });

    describe('with the classic runtime', () => {
      const runtime = 'classic';

      it('removes the css prop runtime', () => {
        const actual = transform(code, { run: 'both', runtime });

        expect(actual).toMatchInlineSnapshot(`
          "/* app.tsx generated by @compiled/babel-plugin v0.0.0 */

          import * as React from 'react';
          import { ax, ix } from '@compiled/react/runtime';

          const Component = () =>
            /*#__PURE__*/ React.createElement(
              'div',
              {
                className: ax(['_1wyb1fwx _syaz13q2']),
              },
              'hello world'
            );
          "
        `);
      });

      it('calls onFoundStyleRules for every found style', () => {
        const onFoundStyleRules = jest.fn();

        transform(code, { onFoundStyleRules, run: 'both', runtime });

        expect(onFoundStyleRules).toHaveBeenCalledTimes(1);
        expect(onFoundStyleRules).toHaveBeenCalledWith([
          '._1wyb1fwx{font-size:12px}',
          '._syaz13q2{color:blue}',
        ]);
      });
    });
  });

  describe('when run in subsequent steps', () => {
    describe('with the automatic runtime', () => {
      const runtime = 'automatic';

      it('removes the css prop runtime', () => {
        const baked = transform(code, { run: 'bake', runtime });
        const actual = transform(baked, { run: 'extract', runtime });

        // TODO: This is missing the PURE pragma in the Component return. Fix this.
        expect(actual).toMatchInlineSnapshot(`
          "/* app.tsx generated by @compiled/babel-plugin v0.0.0 */
          import { ax, ix } from '@compiled/react/runtime';
          import { jsxs as _jsxs } from 'react/jsx-runtime';
          import { jsx as _jsx } from 'react/jsx-runtime';

          const Component = () =>
            _jsx('div', {
              className: ax(['_1wyb1fwx _syaz13q2']),
              children: 'hello world',
            });
          "
        `);
      });

      it('calls onFoundStyleRules for every found style', () => {
        const onFoundStyleRules = jest.fn();
        const baked = transform(code, { run: 'bake', runtime });

        transform(baked, { onFoundStyleRules, run: 'both', runtime });

        expect(onFoundStyleRules).toHaveBeenCalledTimes(1);
        expect(onFoundStyleRules).toHaveBeenCalledWith([
          '._1wyb1fwx{font-size:12px}',
          '._syaz13q2{color:blue}',
        ]);
      });
    });

    describe('with the classic runtime', () => {
      const runtime = 'classic';

      it('remove the css prop runtime', () => {
        const baked = transform(code, { run: 'bake', runtime });
        const actual = transform(baked, { run: 'extract', runtime });

        expect(actual).toMatchInlineSnapshot(`
          "/* app.tsx generated by @compiled/babel-plugin v0.0.0 */
          import * as React from 'react';
          import { ax, ix } from '@compiled/react/runtime';

          const Component = () =>
            /*#__PURE__*/ React.createElement(
              'div',
              {
                className: ax(['_1wyb1fwx _syaz13q2']),
              },
              'hello world'
            );
          "
        `);
      });

      it('calls onFoundStyleRules for every found style', () => {
        const onFoundStyleRules = jest.fn();
        const baked = transform(code, { run: 'bake', runtime });

        transform(baked, { onFoundStyleRules, run: 'both', runtime });

        expect(onFoundStyleRules).toHaveBeenCalledTimes(1);
        expect(onFoundStyleRules).toHaveBeenCalledWith([
          '._1wyb1fwx{font-size:12px}',
          '._syaz13q2{color:blue}',
        ]);
      });
    });
  });
});
