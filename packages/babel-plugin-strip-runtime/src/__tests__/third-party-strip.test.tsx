import { transformSync } from '@babel/core';
import compiledBabelPlugin from '@compiled/babel-plugin';
import stripRuntimeBabelPlugin from '../index';

const transform = (
  opts: {
    callback?: (style: string) => void;
    runtime?: 'automatic' | 'classic';
    modules?: boolean;
  } = {}
) => (code: TemplateStringsArray | string): string => {
  const compileDownModules = opts.modules ?? 'auto';
  const runtime = opts.runtime || 'classic';
  const initialPass = transformSync(typeof code === 'string' ? code : code[0], {
    configFile: false,
    babelrc: false,
    filename: process.cwd() + '/src/__tests__/third-party-strip.test.tsx',
    presets: [
      ['@babel/preset-env', { targets: { esmodules: true }, modules: compileDownModules }],
      '@babel/preset-typescript',
      ['@babel/preset-react', { runtime, useBuiltIns: true }],
    ],
    plugins: [compiledBabelPlugin],
  });

  const result = transformSync(initialPass.code, {
    configFile: false,
    babelrc: false,
    filename: process.cwd() + '/src/__tests__/third-party-strip.test.tsx',
    plugins: [[stripRuntimeBabelPlugin, { onFoundStyleSheet: opts.callback }]],
  });

  if (!result?.code) {
    throw new Error();
  }

  return result.code;
};

describe('third party strip runtime', () => {
  it('should callback on every found style classic', () => {
    const callback = jest.fn();

    transform({ callback, runtime: 'classic' })`
      import '@compiled/react';

      const Component = () => <div css={{ fontSize: 12, color: 'blue' }}>hello world</div>
    `;

    expect(callback).toHaveBeenCalledTimes(2);
    expect(callback).toHaveBeenCalledWith('._1wyb1fwx{font-size:12px}');
    expect(callback).toHaveBeenCalledWith('._syaz13q2{color:blue}');
  });

  it('should callback on every found style automatic', () => {
    const callback = jest.fn();

    transform({ callback, runtime: 'automatic' })`
      import '@compiled/react';

      const Component = () => <div css={{ fontSize: 12, color: 'blue' }}>hello world</div>
    `;

    expect(callback).toHaveBeenCalledTimes(2);
    expect(callback).toHaveBeenCalledWith('._1wyb1fwx{font-size:12px}');
    expect(callback).toHaveBeenCalledWith('._syaz13q2{color:blue}');
  });

  it('should strip the runtime of a classic third party with transformed modules', () => {
    const actual = transform()`
      import '@compiled/react';

      const MyComponent = () => <div css={{ display: 'block' }} />
    `;

    expect(actual.split('var MyComponent = ')[1]).toMatchInlineSnapshot(`
      "() => React.createElement(\\"div\\", {
        className: (0, _runtime.ax)([\\"_1e0c1ule\\"])
      });"
    `);
  });

  it('should strip the runtime of an automatic third party with transformed modules', () => {
    const actual = transform({ runtime: 'automatic' })`
      import '@compiled/react';

      const MyComponent = () => <div css={{ display: 'block' }} />
    `;

    expect(actual.split('var MyComponent = ')[1]).toMatchInlineSnapshot(`
      "() => (0, _jsxRuntime.jsx)(\\"div\\", {
        className: (0, _runtime.ax)([\\"_1e0c1ule\\"])
      });"
    `);
  });

  it('should strip the runtime of a classic third party with untransformed modules', () => {
    const actual = transform({ modules: false })`
      import React from 'react';
      import '@compiled/react';

      const MyComponent = () => <div css={{ display: 'block' }} />
    `;

    expect(actual).toMatchInlineSnapshot(`
      "/* third-party-strip.test.tsx generated by @compiled/babel-plugin v0.0.0 */
      import React from 'react';
      import { ax, ix } from \\"@compiled/react/runtime\\";

      var MyComponent = () => React.createElement(\\"div\\", {
        className: ax([\\"_1e0c1ule\\"])
      });"
    `);
  });

  it('should strip the runtime of a automatic third party with untransformed modules', () => {
    const actual = transform({ modules: false, runtime: 'automatic' })`
      import '@compiled/react';

      const MyComponent = () => <div css={{ display: 'block' }} />
    `;

    expect(actual).toMatchInlineSnapshot(`
      "/* third-party-strip.test.tsx generated by @compiled/babel-plugin v0.0.0 */
      import * as React from 'react';
      import { ax, ix } from \\"@compiled/react/runtime\\";
      import { jsxs as _jsxs } from \\"react/jsx-runtime\\";
      import { jsx as _jsx } from \\"react/jsx-runtime\\";

      var MyComponent = () => _jsx(\\"div\\", {
        className: ax([\\"_1e0c1ule\\"])
      });"
    `);
  });
});
