import { writeFileSync } from 'fs';

import { transform } from './transform';

// Mock out FS to avoid writing to disk
// We aren't processing the result anyway, so no need for specifying the response
jest.mock('fs');

describe('babel-plugin-strip-runtime with vanillaCss', () => {
  describe('with the classic runtime', () => {
    const runtime = 'classic';

    const styles = `{
      danger: {
          color: 'red',
          backgroundColor: 'red'
      },
      success: {
        color: 'green',
        backgroundColor: 'green'
      }
    }`;

    it('should transform vanillaCss to ax', () => {
      const actual = transform(
        `
        import { cssMap, vanillaCss } from '@compiled/react';

        const someStyles = cssMap(${styles});

        function someFunctionCall(_obj) {}

        export const bap = someFunctionCall({
          // node DOM constructor
          toDOM(node) {
            const { localId, state } = node.attrs;
            // injectCompiledCss should be added right before \`attrs\` at build time.
            const attrs = {
              'data-task-local-id': localId || 'local-task',
              'data-task-state': state || 'TODO',
              // vanillaCss function will hint Babel to inject styles on run time, and extract styles on build time
              class: vanillaCss([someStyles.base, state === "DONE" && someStyles.done]),
            };
            // construct a div node
            return ['div', attrs, 0];
          },
        });
      `,
        {
          run: 'both',
          runtime,
          extractStylesToDirectory: { source: 'src/', dest: 'dist/' },
        }
      );

      expect(actual).toMatchInlineSnapshot(`
        "/* app.tsx generated by @compiled/babel-plugin v0.0.0 */
        import './app.compiled.css';
        import * as React from 'react';
        import { ax, ix } from '@compiled/react/runtime';
        const someStyles = {
          danger: '_syaz5scu _bfhk5scu',
          success: '_syazbf54 _bfhkbf54',
        };
        function someFunctionCall(_obj) {}
        export const bap = someFunctionCall({
          // node DOM constructor
          toDOM(node) {
            const { localId, state } = node.attrs;
            // injectCompiledCss should be added right before \`attrs\` at build time.
            const attrs = {
              'data-task-local-id': localId || 'local-task',
              'data-task-state': state || 'TODO',
              // vanillaCss function will hint Babel to inject styles on run time, and extract styles on build time
              class: ax([someStyles.base, state === 'DONE' && someStyles.done]),
            };
            // construct a div node
            return ['div', attrs, 0];
          },
        });
        "
      `);

      expect(writeFileSync).toBeCalledWith(
        expect.stringContaining('app.compiled.css'),
        '._bfhk5scu{background-color:red}\n' +
          '._bfhkbf54{background-color:green}\n' +
          '._syaz5scu{color:red}\n' +
          '._syazbf54{color:green}'
      );
    });
  });
});
