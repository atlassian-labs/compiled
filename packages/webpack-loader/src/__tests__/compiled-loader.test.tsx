import loader from '../index';

const getLoader = (opts: { addDependency: jest.Mock; callback: jest.Mock }) =>
  loader.bind({
    async: () => opts.callback,
    resourcePath: '/projects/index.js',
    addDependency: opts.addDependency,
    getOptions: () => ({ importReact: false }),
  });

describe('webpack loader', () => {
  it('should bail out early if the file has no compiled in it', async () => {
    const callback = jest.fn();
    const loader = getLoader({ addDependency: jest.fn(), callback });

    await loader('console.log(undefined);');

    expect(callback).toHaveBeenCalled();
  });

  it('should transform code if compiled has been found', async () => {
    const callback = jest.fn();
    const loader = getLoader({ addDependency: jest.fn(), callback });
    const code = `import '@compiled/react';`;

    await loader(code);

    expect(callback).toHaveBeenCalled();
  });

  it('should callback with transformed code', async () => {
    const callback = jest.fn();
    const loader = getLoader({ addDependency: jest.fn(), callback });

    await loader(`import '@compiled/react';`);

    expect(callback.mock.calls[0][0]).toBe(null);
    expect(callback.mock.calls[0][1]).toMatchInlineSnapshot(`
      "/* index.js generated by @compiled/babel-plugin v0.0.0 */

      import { ax, ix, CC, CS } from \\"@compiled/react/runtime\\";"
    `);
  });

  it('should callback on error', async () => {
    const callback = jest.fn();
    const loader = getLoader({ addDependency: jest.fn(), callback });

    await loader(`import '@compiled/react'; asdasd`);

    expect(callback.mock.calls[0][0]).toBeDefined();
  });
});
